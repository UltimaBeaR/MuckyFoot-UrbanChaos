
https://stackoverflow.com/questions/2290509/debug-vs-ndebug
https://learn.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=msvc-170
    about NDEBUG, _DEBUG and DEBUG symbols


coan https://coan2.sourceforge.net/index.php?page=about

coan report unique preprocessor directives that are using in project
    coan symbols --ifs --once-only --gag error --filter cpp,c,h,hpp --recurse src

coan modify
    coan source ***CONFIG_FLAGS*** --no-transients --filter cpp,c,h,hpp --recurse src







in cmd:

coan source ^
-DTEX_EMBED ^
-DVERSION_D3D ^
-UDOG_POO ^
-UMAKE_THEM_FACE_THE_CAMERA ^
-UTARGET ^
-UNEW_FLOOR ^
-USTRIP_STATS ^
-UMIKES_UNUSED_AUTOMATIC_FLOOR_TEXTURE_GROUPER ^
-DTOMS_TEST_FIXUP_CODE=yes ^
-UFAST_EDDIE ^
-UBIKE ^
-UDRAW_THIS_DEBUG_STUFF ^
-UNO_MORE_BALLOONS ^
-UNO_MORE_BALLOONS_NOW ^
-UWE_WANT_TO_DRAW_THE_TEXTURE_SHADOW_PAGE ^
-UARGH ^
-Uwerrr ^
-USEWERS ^
-UBREAKTIMER ^
-DDISABLE_CRINKLES=0 ^
-ULIMIT_TOTAL_PYRO_SPRITES_PLEASE_BOB ^
-DFACETINFO ^
-UUNUSED_WIRE_CUTTERS ^
-UFACET_REMOVAL_TEST ^
-UUNUSED_WIRECUTTERS ^
-UQUICK_FACET ^
-UWE_WANT_TO_DRAW_THESE_FACET_LINES ^
-UDO_SUPERFACETS_PLEASE_BOB ^
-DFARFACET_USE_INDEXED_LISTS=1 ^
-UFASTPRIM_PERFORMANCE ^
-UTARGET_DC ^
-UPSX ^
-UBUILD_PSX ^
-UPSX_COMPRESS_LIGHT ^
-UPSX_STERN_REVENGE_BUG_AND_CRAP_DRIVERS ^
-UPSX_NOT_REALLY ^
-UDODGYPSXIFY ^
-UVERSION_PSX ^
-UVERSION_GLIDE ^
-UEDITOR ^
--no-transients --filter cpp,c,h,hpp --recurse src











whole project dependency graph could be analyzed using cppdepend 2024.1


reformating whole project with clang-format
    find . -regex '.*\.\(cpp\|c\|h\|hpp\)' -exec clang-format -style=file -i {} \;
    in project folder from git bash




===================================================



files and folders
    mfstdlib - very basic code (global defines, platform dependencies). I think they reuse it across all games

    ddlibrary - something like engine. Includes graphics, window management, keyboard control
        gdisplay.h
            Display class - main graphics rendering class

    ddengine - looks like same as ddlibrary but mabe built on top of ddlibrary. It also has dependencies on main folder

    editor, ledit - some stuff from editor. I tried to strip out all editor stuff but something still exist because of dependencies from other places

    main - main game logic i suppose (biggest folder)
        main.cpp
            has entry point - main() function. It uses SetupHost() from ddlibrary which setups winapi stuff (windows, keyboard)

    outro - i think it's special folder related to final mission/missions



graphics init 
    OpenDisplay() call from gdisplay.h
    uses in
        game_startup() - this calls from main() (not directly)

        QEDIT_loop() - looks like editor only code
    
    







===============

TODO
    find what symbols are needed and setup number of configurations to test compilation using them in order to see when i cut out something wrong

    remove all unused / debug only / experimenting code
    find unused symbols and functions and remove it
    remove all editor code
    remove qedit code (look for QEDIT_loop and dependencies)

    try to strip out as much unnececary includes as possible in every file (h or cpp)
        * maby i already removed some nececcary code which is only invoked under specific ifdef defines, i should check it later and get that code back if that's the case

    


    


    remove asm usage (search for __asm)
        so code could be compiled for arm as well

    restructure files to better track what depends on what
        * not sure it is needed, as it will make harder for comparing code base to previous versions (for restoring some removed code)

    SDL2 (making game crossplatform)
        make window initialization using sdl, and throw out windows specific init code.
            Window initialization
            Input handling (just keyboard at first)
            File system handling
        
        make support for xbox/ps gamepad using sdl gamepad.
            See removed psx code for implementation details.
            Also see removed analog moving (it has been removed by Kai. SLONG	analogue=0; in interfac.cpp)

        at first - use original direct3d/directdraw calls using sdl's window handle.
        Next - replace original direct3d calls with some sort of direct3d to opengl mapping library.
        Next - rewrite whole rendering stuff to opengl 4.1 (maby some rendering code abstraction will be needed)

    

    

