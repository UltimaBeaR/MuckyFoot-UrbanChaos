





all defines
    NDEBUG: unconfigured
    DEBUG: unconfigured
    DOG_POO: unconfigured
    MAKE_THEM_FACE_THE_CAMERA: unconfigured
    TEX_EMBED: unconfigured
    TARGET: unconfigured
    NEW_FLOOR: unconfigured
    STRIP_STATS: unconfigured
    MIKES_UNUSED_AUTOMATIC_FLOOR_TEXTURE_GROUPER: unconfigured
    TOMS_TEST_FIXUP_CODE: transient
    FAST_EDDIE: unconfigured
    BIKE: unconfigured
    DRAW_THIS_DEBUG_STUFF: unconfigured
    NO_MORE_BALLOONS: unconfigured
    _DEBUG: unconfigured
    NO_MORE_BALLOONS_NOW: unconfigured
    WE_WANT_TO_DRAW_THE_TEXTURE_SHADOW_PAGE: unconfigured
    ARGH: unconfigured
    werrr: unconfigured
    SEWERS: unconfigured
    BREAKTIMER: unconfigured
    DISABLE_CRINKLES: transient
    FINAL: unconfigured
    LIMIT_TOTAL_PYRO_SPRITES_PLEASE_BOB: unconfigured
    FACETINFO: transient
    UNUSED_WIRE_CUTTERS: unconfigured
    FACET_REMOVAL_TEST: unconfigured
    UNUSED_WIRECUTTERS: unconfigured
    QUICK_FACET: unconfigured
    WE_WANT_TO_DRAW_THESE_FACET_LINES: unconfigured
    DO_SUPERFACETS_PLEASE_BOB: unconfigured
    FARFACET_USE_INDEXED_LISTS: transient
    FASTPRIM_PERFORMANCE: unconfigured





useful defines
    DARCI_HITS_COPS
        enables hitting cops (1st level for example)


    USE_A3D
        something about sound - probably should delete that
    BIKE
        delete
    
    ??? something about grappling hook





whole project dependency graph could be analyzed using cppdepend 2024.1



reformating whole project with clang-format
    find . -regex '.*\.\(cpp\|c\|h\|hpp\)' -exec clang-format -style=file -i {} \;
    in project folder from git bash

coan - tool to analyze preprocessor symbols and optimize/throw away unused code under it
    https://coan2.sourceforge.net/index.php?page=about

    commands to clean source code from old unused ifdef-s

    command:
        coan source *** --filter cpp,h --recurse src
        where *** is options string

    options for defines:
        TARGET_DC - should be undefined. only for dreamcast platform
            -UTARGET_DC

        PSX - should be undefined. only for ps1 platform
            -UPSX
            -UBUILD_PSX
            -UPSX_COMPRESS_LIGHT
            -UPSX_STERN_REVENGE_BUG_AND_CRAP_DRIVERS
            -UPSX_NOT_REALLY
            -UDODGYPSXIFY
            -UVERSION_PSX
        
        GLIDE
            -UVERSION_GLIDE

    other options
        --no-transients fixes some bad coan optimizations that should not be done here



report unique preprocessor directives that are using in project
    coan symbols --ifs --once-only --gag error --filter cpp,c,h,hpp --recurse src


remove specific define
    coan source -U*** --no-transients --filter cpp,c,h,hpp --recurse src




things to try


    https://github.com/myint/cppclean
        dead code ellimination


    
    src\fallen\Headers\inline.h
        remove asm from here and other files like this


done
    coan source -UTARGET_DC -UPSX --no-transients --filter cpp,c,h,hpp --recurse src
        to remove ps1 and dreamcast code under ifdefs

    coan source -UEDITOR --no-transients --filter cpp,c,h,hpp --recurse src
        to remove editor related code from main code base

    coan source -UBUILD_PSX -UPSX_COMPRESS_LIGHT -UPSX_STERN_REVENGE_BUG_AND_CRAP_DRIVERS -UPSX_NOT_REALLY -UDODGYPSXIFY -UVERSION_PSX -UVERSION_GLIDE --no-transients --filter cpp,c,h,hpp --recurse src
        other psx and glide stuff




===================================================



files and folders
    mfstdlib - very basic code (global defines, platform dependencies). I think they reuse it across all games

    ddlibrary - something like engine. Includes graphics, window management, keyboard control
        gdisplay.h
            Display class - main graphics rendering class

    ddengine - looks like same as ddlibrary but mabe built on top of ddlibrary. It also has dependencies on main folder

    editor, ledit - some stuff from editor. I tried to strip out all editor stuff but something still exist because of dependencies from other places

    main - main game logic i suppose (biggest folder)
        main.cpp
            has entry point - main() function. It uses SetupHost() from ddlibrary which setups winapi stuff (windows, keyboard)

    outro - i think it's special folder related to final mission/missions



graphics init 
    OpenDisplay() call from gdisplay.h
    uses in
        game_startup() - this calls from main() (not directly)

        QEDIT_loop() - looks like editor only code
    
    







===============

TODO
    find what symbols are needed and setup number of configurations to test compilation using them in order to see when i cut out something wrong

    remove all unused / debug only / experimenting code
    find unused symbols and functions and remove it
    remove all editor code
    remove qedit code (look for QEDIT_loop and dependencies)

    try to strip out as much unnececary includes as possible in every file (h or cpp)
        * maby i already removed some nececcary code which is only invoked under specific ifdef defines, i should check it later and get that code back if that's the case

    


    


    remove asm usage (search for __asm)
        so code could be compiled for arm as well

    restructure files to better track what depends on what
        * not sure it is needed, as it will make harder for comparing code base to previous versions (for restoring some removed code)

    SDL2 (making game crossplatform)
        make window initialization using sdl, and throw out windows specific init code.
            Window initialization
            Input handling (just keyboard at first)
            File system handling
        
        make support for xbox/ps gamepad using sdl gamepad.
            See removed psx code for implementation details.
            Also see removed analog moving (it has been removed by Kai. SLONG	analogue=0; in interfac.cpp)

        at first - use original direct3d/directdraw calls using sdl's window handle.
        Next - replace original direct3d calls with some sort of direct3d to opengl mapping library.
        Next - rewrite whole rendering stuff to opengl 4.1 (maby some rendering code abstraction will be needed)

    

    

