//
// Texture handling is wierd!
//

#ifndef TEXTURE_H
#define TEXTURE_H

//
// The shadow texture page is generated by you! This is its size.
//

#define TEXTURE_SHADOW_SIZE 128

//
// Loads all the texture pages.
//

void TEXTURE_load(void);

//
// The number of standard texture pages.
//

extern SLONG TEXTURE_page_num_standard;

extern SLONG TEXTURE_page_fog; // The fog texture page.
extern SLONG TEXTURE_page_moon; // The moon texture page.
extern SLONG TEXTURE_page_clouds; // The clouds texture page.
extern SLONG TEXTURE_page_water; // The water texture page.
extern SLONG TEXTURE_page_puddle; // The puddle texture page.
extern SLONG TEXTURE_page_shadow; // The shadow texture page.
extern SLONG TEXTURE_page_detail; // PRIVATE!

extern SLONG TEXTURE_num_textures; // The total number of pages.

//
// The shadow page is a byte-per pixel intensity format whose size
// is (TEXTURE_SHADOW_SIZE x TEXTURE_SHADOW_SIZE)
//

void TEXTURE_download_shadow_page(UBYTE* data);

//
// Puts the render-states into a known state so that set_page will work.
// Do this after you've fiddled about with renderstates yourself.
//

void TEXTURE_init_states(void);

//
// Sets up all the render states to use this given texture page with trilineaer
// mippmapping or with detail texturing if appropriate.
//

#define TEXTURE_MULTI_TRILINEAR 1
#define TEXTURE_MULTI_DETAIL 2

void TEXTURE_set_page(SLONG page, SLONG multi);

//
// Returns the four texture coordinates of the given MiniTextureBits structure
//

void TEXTURE_get_minitexturebits_uvs(
    UWORD texture,
    SLONG* page,
    float* u0,
    float* v0,
    float* u1,
    float* v1,
    float* u2,
    float* v2,
    float* u3,
    float* v3);

//
// Fixed prims to work with fiddled textures. Does nothing if
// the textures were loaded normally.
//

void TEXTURE_fix_prim_textures(void);

//
// Gives the uv of the top left of the given texture square and
// returns the page.
//

SLONG TEXTURE_get_fiddled_position(
    SLONG square_u,
    SLONG square_v,
    SLONG page,
    float* u,
    float* v);

#endif
